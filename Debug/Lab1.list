
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000230  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000360  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000360  08000360  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000360  08000360  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000364  08000364  00010364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  0800036c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  0800036c  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000177  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000eb  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00020290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000060  00000000  00000000  00020308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000fac  00000000  00000000  00020368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004f6  00000000  00000000  00021314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003dec  00000000  00000000  0002180a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000255f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000128  00000000  00000000  00025648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08000348 	.word	0x08000348

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08000348 	.word	0x08000348

08000170 <main>:
void espera_ms(uint32_t);
void configura_timer();
/*************************************MAIN************************************/
volatile uint32_t ms_pausa = 500;
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	configura_led();
 8000174:	f000 f814 	bl	80001a0 <configura_led>
	configura_timer();
 8000178:	f000 f84a 	bl	8000210 <configura_timer>
	while(1){
		prende_led();
 800017c:	f000 f82c 	bl	80001d8 <prende_led>
		espera_ms(ms_pausa);
 8000180:	4b06      	ldr	r3, [pc, #24]	; (800019c <main+0x2c>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	f000 f875 	bl	8000274 <espera_ms>
		apaga_led();
 800018a:	f000 f833 	bl	80001f4 <apaga_led>
		espera_ms(ms_pausa);
 800018e:	4b03      	ldr	r3, [pc, #12]	; (800019c <main+0x2c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4618      	mov	r0, r3
 8000194:	f000 f86e 	bl	8000274 <espera_ms>
		prende_led();
 8000198:	e7f0      	b.n	800017c <main+0xc>
 800019a:	bf00      	nop
 800019c:	20000000 	.word	0x20000000

080001a0 <configura_led>:
void espera(uint32_t iter){
	uint32_t b =0;
	while(b++ < iter);
}

void configura_led(){
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	// habilita el clock del GPIOC
	RCC_APB2ENR |= RCC_APB2ENR_IOPCEN;
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <configura_led+0x30>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a09      	ldr	r2, [pc, #36]	; (80001d0 <configura_led+0x30>)
 80001aa:	f043 0310 	orr.w	r3, r3, #16
 80001ae:	6013      	str	r3, [r2, #0]
	// establece PC13 como salida push-pull / 2MHz max
	GPIOC_CRH &= ~(GPIOC_CRH_MODE13_0|GPIOC_CRH_MODE13_1|GPIOC_CRH_CNF13_0|GPIOC_CRH_CNF13_1); //pongo los 4 bits en cero
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <configura_led+0x34>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <configura_led+0x34>)
 80001b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001ba:	6013      	str	r3, [r2, #0]
	GPIOC_CRH |= GPIOC_CRH_MODE13_1;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <configura_led+0x34>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <configura_led+0x34>)
 80001c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001c6:	6013      	str	r3, [r2, #0]
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021018 	.word	0x40021018
 80001d4:	40011004 	.word	0x40011004

080001d8 <prende_led>:

void prende_led(){
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// prende el LED - poniendo a GND PC13
	GPIOC_ODR &= ~(1 << 13);
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <prende_led+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <prende_led+0x18>)
 80001e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80001e6:	6013      	str	r3, [r2, #0]
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bc80      	pop	{r7}
 80001ee:	4770      	bx	lr
 80001f0:	4001100c 	.word	0x4001100c

080001f4 <apaga_led>:

void apaga_led(){
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	// apaga el LED - poniendo a VDD PC13
	GPIOC_ODR |= (1 << 13);
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <apaga_led+0x18>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a03      	ldr	r2, [pc, #12]	; (800020c <apaga_led+0x18>)
 80001fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000202:	6013      	str	r3, [r2, #0]
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	4001100c 	.word	0x4001100c

08000210 <configura_timer>:

void configura_timer(){
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	//habilita el clock del TIM3
	RCC_APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <configura_timer+0x4c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a10      	ldr	r2, [pc, #64]	; (800025c <configura_timer+0x4c>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6013      	str	r3, [r2, #0]

	//Verifico que el registro TIM3_CR1 esté cargado por completo con ceros
	TIM3_CR1 = 0x0000;
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <configura_timer+0x50>)
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]



	//configuracion del prescaller
	TIM3_PSC = 7;						//TIM3_PSC |= (TIM3_PSC_0|TIM3_PSC_1|TIM3_PSC_2);
 8000226:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <configura_timer+0x54>)
 8000228:	2207      	movs	r2, #7
 800022a:	601a      	str	r2, [r3, #0]

	//Contador en 0
	TIM3_CNT = 0;
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <configura_timer+0x58>)
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]

	//Auto-Reload al máximo
	TIM3_ARR = 0xFFFF;
 8000232:	4b0e      	ldr	r3, [pc, #56]	; (800026c <configura_timer+0x5c>)
 8000234:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000238:	601a      	str	r2, [r3, #0]

	//Genero un evento de update por software
	TIM3_EGR |= (1<<0);
 800023a:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <configura_timer+0x60>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a0c      	ldr	r2, [pc, #48]	; (8000270 <configura_timer+0x60>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6013      	str	r3, [r2, #0]

	//TIMER ENABLE
		TIM3_CR1 |=TIM3_CR1_CEN;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <configura_timer+0x50>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a05      	ldr	r2, [pc, #20]	; (8000260 <configura_timer+0x50>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	6013      	str	r3, [r2, #0]
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	4002101c 	.word	0x4002101c
 8000260:	40000400 	.word	0x40000400
 8000264:	40000428 	.word	0x40000428
 8000268:	40000424 	.word	0x40000424
 800026c:	4000042c 	.word	0x4000042c
 8000270:	40000414 	.word	0x40000414

08000274 <espera_ms>:

void espera_ms(uint32_t ms){
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	for(; ms>0 ; ms--){
 800027c:	e00b      	b.n	8000296 <espera_ms+0x22>
		TIM3_CNT = 0;
 800027e:	4b0a      	ldr	r3, [pc, #40]	; (80002a8 <espera_ms+0x34>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
		//Genero un evento de update por software
		//TIM3_EGR |= (1<<0);
		while(TIM3_CNT < 1000);
 8000284:	bf00      	nop
 8000286:	4b08      	ldr	r3, [pc, #32]	; (80002a8 <espera_ms+0x34>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800028e:	d3fa      	bcc.n	8000286 <espera_ms+0x12>
	for(; ms>0 ; ms--){
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3b01      	subs	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1f0      	bne.n	800027e <espera_ms+0xa>
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	40000424 	.word	0x40000424

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff47 	bl	8000170 <main>

080002e2 <LoopForever>:

LoopForever:
    b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002f8:	20000020 	.word	0x20000020

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	2600      	movs	r6, #0
 8000304:	4d0c      	ldr	r5, [pc, #48]	; (8000338 <__libc_init_array+0x38>)
 8000306:	4c0d      	ldr	r4, [pc, #52]	; (800033c <__libc_init_array+0x3c>)
 8000308:	1b64      	subs	r4, r4, r5
 800030a:	10a4      	asrs	r4, r4, #2
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	f000 f81a 	bl	8000348 <_init>
 8000314:	2600      	movs	r6, #0
 8000316:	4d0a      	ldr	r5, [pc, #40]	; (8000340 <__libc_init_array+0x40>)
 8000318:	4c0a      	ldr	r4, [pc, #40]	; (8000344 <__libc_init_array+0x44>)
 800031a:	1b64      	subs	r4, r4, r5
 800031c:	10a4      	asrs	r4, r4, #2
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
